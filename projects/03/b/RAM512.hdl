// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // select the RAM64 chip to pass the input using the
    // [7..9] address, the three Most Signifcant Bits (MSB).
    DMux8Way (in=load, sel=address[6..8], a=ram0, b=ram1,
        c=ram2, d=ram3, e=ram4, f=ram5, g=ram6,
        h=ram7);

    // Load all the eight 64-bit RAMs with the selected
    // RAM64 data from the 6 Least Significant Bits
    // of the address which is the selected RAM64's address.
    RAM64 (in=in, load=ram0, address=address[0..5], out=ram0out);
    RAM64 (in=in, load=ram1, address=address[0..5], out=ram1out);
    RAM64 (in=in, load=ram2, address=address[0..5], out=ram2out);
    RAM64 (in=in, load=ram3, address=address[0..5], out=ram3out);
    RAM64 (in=in, load=ram4, address=address[0..5], out=ram4out);
    RAM64 (in=in, load=ram5, address=address[0..5], out=ram5out);
    RAM64 (in=in, load=ram6, address=address[0..5], out=ram6out);
    RAM64 (in=in, load=ram7, address=address[0..5], out=ram7out);

    // read the selected 8-bit RAM's output using
    // the MSB of the address.
    Mux8Way16 (a=ram0out, b=ram1out, c=ram2out,
        d=ram3out, e=ram4out, f=ram5out, g=ram6out,
        h=ram7out,  sel=address[6..8], out=out);
}
